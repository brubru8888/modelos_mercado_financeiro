# -*- coding: utf-8 -*-
"""Cópia de Primeiro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Ak4xoEjZ2eJN5o04n_EEc9y3UKbPJl7

**Informações sobre Aprendizado Supervisionado (Supervised Learning - SL) usando a biblioteca Scikit Learn: [SL com Scikit Learn](https://scikit-learn.org/stable/supervised_learning.html)**

**Informações sobre Redes Neurais MLP (Multi Layer Perceptron) usando a biblioteca Scikit Learn: [MLP com Scikit Learn](https://scikit-learn.org/stable/modules/neural_networks_supervised.html)**
"""

#Importando o modelo otimiza a função log-loss
from sklearn.neural_network import MLPClassifier
#Importando funções de métricas, como funções de perda, pontuação e utilidades
from sklearn import metrics


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid')

dados=pd.read_excel('Dados_Classes_Indices.xlsx', engine='openpyxl')
dados.set_index(keys = 'Data', inplace = True)

dados_chg = dados.pct_change()
dados_chg.fillna(0, inplace=True)

dados_mom1 = dados.copy()
dados_mom1.iloc[0:3] = 0
mom_period = 1

for ind in range(mom_period, len(dados.index)):
  dados_mom1.iloc[ind] = dados.iloc[ind]/dados.iloc[ind-mom_period]

dados_mom3 = dados.copy()
dados_mom3.iloc[0:3] = 0
mom_period = 3

for ind in range(mom_period, len(dados.index)):
  dados_mom3.iloc[ind] = dados.iloc[ind]/dados.iloc[ind-mom_period]

dados_mom6 = dados.copy()
dados_mom6.iloc[0:6] = 0
mom_period = 6

for ind in range(mom_period, len(dados.index)):
  dados_mom6.iloc[ind] = dados.iloc[ind]/dados.iloc[ind-mom_period]

dados_apr = dados_chg[['IMAB', 'IBOV']].copy()

dados_apr['MOM1'] = dados_mom1['IMAB']
dados_apr['MOM3'] = dados_mom3['IMAB']
dados_apr['MOM6'] = dados_mom6['IMAB']


dados_apr['IMAB-BUY'] = np.argmin(dados_apr[['IMAB', 'IBOV']]
.reset_index().drop(['Data'], axis=1).to_numpy(), axis=1)
dados_apr['IBOV-BUY'] = np.argmax(dados_apr[['IMAB', 'IBOV']]
.reset_index().drop(['Data'], axis=1).to_numpy(), axis=1)

din = dados_apr[['MOM1', 'MOM3', 'MOM6']].reset_index().drop(['Data'], axis=1).to_numpy()
dout = dados_apr[['IMAB-BUY', 'IBOV-BUY']].reset_index().drop(['Data'], axis=1).to_numpy()

print("Data samples:", dout.shape[0])

#Número de samples para treinamento
n_train = 100

#Separando os dados em conjunto de treinamento e validação
train_in =   din[12:12+n_train]
train_out = dout[13:13+n_train]

val_in =   din[12+n_train:dout.shape[0]-1]
val_out = dout[13+n_train:dout.shape[0]]

# Treinamento com Redes Neurais MLP
from sklearn.neural_network import MLPClassifier


clf = MLPClassifier(random_state=1, hidden_layer_sizes=(20, ), max_iter=1000000, solver='lbfgs', activation='tanh',alpha=0.0001,warm_start=True,early_stopping=True)
clf.fit(train_in, train_out)

#Avaliando os resultados
y_pred = clf.predict(train_in)
print("Accuracy train:",metrics.accuracy_score(train_out, y_pred))

y_pred = clf.predict(val_in)
print("Accuracy validation:",metrics.accuracy_score(val_out, y_pred))

y_pred = clf.predict(din)

#Copiando as saídas do algoritmo de aprendizado para o Data frame
dados_apr['IMAB-BUY-APR'] = np.argmin(y_pred, axis=1)
dados_apr['IBOV-BUY-APR'] = np.argmax(y_pred, axis=1)

dados_apr['IMAB-BUY-APR'] = dados_apr['IMAB-BUY-APR'].shift(1)
dados_apr['IBOV-BUY-APR'] = dados_apr['IBOV-BUY-APR'].shift(1)

#Calculando o resultado acumulado do investimento utilizando aprendizado
dados_apr['APR-CHG'] = (dados_apr['IMAB'] * dados_apr['IMAB-BUY-APR']) + (dados_apr['IBOV'] * dados_apr['IBOV-BUY-APR'])
dados['APR-ACC'] = (1 + dados_apr['APR-CHG']).cumprod()

# Gráfico de comparação IBOV x SELIC x Aprendizado
dados = dados*100 / dados.iloc[n_train]
dados[[ 'IBOV', 'APR-ACC','IMAB']].iloc[n_train:].plot(figsize = (15,5))

# Retorno e volatilidade IMAB x IBOV x Aprendizado
ref_data = n_train
periodo = int(len(dados.index[ref_data+1:])/12)
print("Periodo:", dados.index[ref_data+1], "-", dados.index[-1], '(', periodo,')')

ret_acc = (dados[['IMAB', 'IBOV', 'APR-ACC']].iloc[-1]/dados[['IMAB', 'IBOV', 'APR-ACC']].iloc[ref_data])
print("Retorno acumulado:\n", ret_acc)
ret_aa = ((dados[['IMAB', 'IBOV', 'APR-ACC']].iloc[-1]/dados[['IMAB', 'IBOV', 'APR-ACC']].iloc[ref_data])**(1/periodo))-1
print("Retorno anualizado:\n", ret_aa)
vol_aa = dados_apr[['IMAB', 'IBOV', 'APR-CHG']].iloc[ref_data+1:].std()*np.sqrt(12)
print("Vol anualizada:\n", vol_aa)

#Criando o data frame com informações para o algoritmo de aprendizado
dados_apr = dados_chg[['IBOV', 'SELIC-ACC']].copy()

#Selecionando o Momentum do IBOV para entrada do algoritmo
dados_apr['MOM1'] = dados_mom1['IBOV']
dados_apr['MOM3'] = dados_mom3['IBOV']
dados_apr['MOM6'] = dados_mom6['IBOV']

#Criando as colunas com os resultados de alocação ideais (saída do algoritmo)
dados_apr['IBOV-BUY'] = np.argmin(dados_apr[['IBOV', 'SELIC-ACC']].reset_index().drop(['Data'], axis=1).to_numpy(), axis=1)
dados_apr['SELIC-BUY'] = np.argmax(dados_apr[['IBOV', 'SELIC-ACC']].reset_index().drop(['Data'], axis=1).to_numpy(), axis=1)